package com.turner.cnla.toonix.editor.view{	import com.greensock.TweenLite;	import com.greensock.easing.Bounce;	import com.turner.caf.control.CAFEvent;	import com.turner.cnla.library.AvatarItemVO;	import com.turner.cnla.toonix.editor.commands.CommandType;	import com.turner.cnla.toonix.editor.events.AvatarEditorEvent;	import com.turner.cnla.toonix.editor.events.AvatarEditorInternalEvent;	import com.turner.cnla.toonix.editor.events.Dispatcher;	import com.turner.cnla.toonix.editor.model.Dictionary;	import com.turner.cnla.toonix.editor.model.Model;	import com.turner.cnla.toonix.editor.model.Params;	import com.turner.cnla.toonix.editor.types.AccessoryType;	import com.turner.cnla.toonix.editor.types.PopupType;	import com.turner.cnla.toonix.editor.ui.BasicButton;	import com.turner.cnla.toonix.editor.vo.PopupVO;	import com.turner.toonix.avatardisplay.event.AvatarDisplayEvent;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;		[Event(name="save", type="com.turner.cnla.toonix.editor.events.AvatarEditorInternalEvent")]	[Event(name="cancel", type="com.turner.cnla.toonix.editor.events.AvatarEditorInternalEvent")]	[Event(name="loadComplete", type="com.turner.cnla.toonix.editor.events.AvatarEditorInternalEvent")]	[Event(name="showCreditsWindow", type="com.turner.cnla.toonix.editor.events.AvatarEditorInternalEvent")]	public class AvatarEditorView extends MovieClip	{		private var model:Model;		private var dispatcher:Dispatcher;				private var btnRandomLA:BasicButton;		private var btnRandomBR:BasicButton;		private var btnShare:BasicButton;		private var btnCancel:BasicButton;		private var btnSave:BasicButton;		private var btnUndo:BasicButton;		private var credits:Credits;		private var toonix:Toonix;		private var popupWindow:PopupWindow;		private var costumePriceManager:PriceManager;		private var costumeManager:CostumeManager;		private var featureManager:FeatureManager;		private var txtToonixName:TextField;		private var paleta:Paleta;		private var paletaDisabled:MovieClip;		private var dictionary:Dictionary;				public function AvatarEditorView()		{			super();						model= Model.getInstance();			dispatcher= Dispatcher.getInstance();			dictionary= Dictionary.getInstance();						createChildren();						txtToonixName.text= "";						visible= false;		}				private function createChildren():void		{			btnRandomLA= 			getChildByName("btnRandomLAInstance") as BasicButton;			btnRandomBR= 			getChildByName("btnRandomBRInstance") as BasicButton;			btnShare= 				getChildByName("btnShareInstance") as BasicButton;			btnCancel= 				getChildByName("btnCancelInstance") as BasicButton;			btnSave= 				getChildByName("btnSaveInstance") as BasicButton;			btnUndo= 				getChildByName("btnUndoInstance") as BasicButton;			credits= 				getChildByName("creditsInstance") as Credits;			popupWindow= 			getChildByName("popupWindowInstance") as PopupWindow;			toonix= 				getChildByName("toonixInstance") as Toonix;			costumePriceManager= 	getChildByName("costumePriceManagerInstance") as PriceManager;			costumeManager= 		getChildByName("costumeManagerInstance") as CostumeManager;			featureManager= 		getChildByName("featureManagerInstance") as FeatureManager;			txtToonixName= 			getChildByName("txtToonixNameInstance") as TextField;			paleta= 				getChildByName("paletaInstance") as Paleta;			paletaDisabled= 		getChildByName("paletaDisabledInstance") as MovieClip;		}				public function init():void		{			credits.init();			if(model.userId){				credits.setCredits(model.userCredits, true);			} else {				credits.setCredits(Params.FREE_CREDITS, true);			}			toonix.init();			paleta.init();			costumeManager.init();			featureManager.init();			popupWindow.init();			paleta.setAccessoryType(AccessoryType.SKIN_ACCESSORY);						costumeManager.addEventListener(Event.CHANGE, onSpecialAccessory);			featureManager.addEventListener(Event.SELECT, onSpecialAccessory);						costumeManager.addEventListener(Event.SCROLL, onCostumeScroll);			costumePriceManager.setAccessoryType(AccessoryType.COSTUME_ACCESSORY);						if(model.avatar.costume > 0){				var costume:AvatarItemVO= model.getAccessoryById(model.avatar.costume);				if(costume.price > 0 && !model.hasItemInPurchases(costume)){					costumePriceManager.setItem(costume);					costumePriceManager.setPrice(costume.price);					costumePriceManager.show();				} else {					costumePriceManager.hide();				}			} else {				costumePriceManager.hide();			}						popupWindow.visible= false;						var hasFixedSkin:Boolean= model.hasFixedSkin(model.avatar.costume);			paletaDisabled.visible= hasFixedSkin;			paleta.visible= !hasFixedSkin;						if(model.userId)				txtToonixName.text= model.userName;						credits.addEventListener(AvatarEditorInternalEvent.SHOW_CREDITS_WINDOW, onShowCreditsWindow);						if(!model.showCredits) credits.visible= false;			if(!model.showShare) btnShare.visible= false;						model.addEventListener(AvatarEditorInternalEvent.CHANGE_ACTIVE_AREA, onChangeActiveArea);			model.addEventListener(AvatarEditorInternalEvent.UPDATE_TOONIX, onUpdateToonix);			model.addEventListener(AvatarEditorInternalEvent.UPDATE_ACCESSORY, onUpdateToonix);			model.addEventListener(AvatarEditorInternalEvent.CHANGE_COLOR, onUpdateToonix);			model.addEventListener(AvatarEditorInternalEvent.SHOW_POPUP, onShowPopup);			model.addEventListener(AvatarEditorInternalEvent.ITEM_PURCHASED, onItemPurchased);						btnRandomLA.addEventListener(MouseEvent.CLICK, onButtonClick);			btnRandomBR.addEventListener(MouseEvent.CLICK, onButtonClick);			btnShare.addEventListener(MouseEvent.CLICK, onButtonClick);			btnCancel.addEventListener(MouseEvent.CLICK, onButtonClick);			btnSave.addEventListener(MouseEvent.CLICK, onButtonClick);			btnUndo.addEventListener(MouseEvent.CLICK, onButtonClick);						btnCancel.label= dictionary.main.cancel;			/*btnRandomLA.label= dictionary.main.random;			btnRandomBR.label= dictionary.main.random;*/			btnSave.label= dictionary.main.save;						btnRandomBR.visible= (model.country.toLowerCase() == "br");			btnRandomLA.visible= (model.country.toLowerCase() != "br");						//btnSave.enabled= false;						btnUndo.visible= false;						visible= true;			toonix.visible= false;			toonix.addEventListener(AvatarDisplayEvent.LOAD_COMPLETE, onToonixComplete);						startAnimation();		}				private function startAnimation():void		{			costumeManager.y= -55;			TweenLite.to(costumeManager, 15, {useFrames: true, y: 34, ease: Bounce.easeOut});						featureManager.y= -94.6;			TweenLite.to(featureManager, 15, {useFrames: true, y: -6.7, ease: Bounce.easeOut, delay: 1});						credits.y= -61;			TweenLite.to(credits, 15, {useFrames: true, y: 27, ease: Bounce.easeOut, delay: 6});		}				protected function onToonixComplete(event:Event):void		{			toonix.visible= true;			//btnSave.enabled= true;			dispatchEvent(new AvatarEditorInternalEvent(AvatarEditorInternalEvent.LOAD_COMPLETE));		}		public function updateCredits(newCredits:int):void		{			credits.setCredits(newCredits, true);		}				public function getCredits():int		{			return credits.getCredits();		}				public function save():void		{			if(hasLockedItems()){				var vo:PopupVO= new PopupVO();				vo.title= dictionary.buyAccessory.lockedAccessoryTitle;				vo.message= dictionary.buyAccessory.lockedAccessoryMessage;				vo.type= PopupType.POPUP_ALERT;				vo.credits= -1;				vo.okLabel= dictionary.main.ok;				vo.okCommand= CommandType.CLOSE_POPUP;				vo.okParams= null;								model.showPopup(vo);			} else {				showSaveAnimation();			}		}				protected function onCostumeScroll(event:Event):void		{			costumePriceManager.hide();		}				protected function onShowCreditsWindow(event:Event):void		{			dispatchEvent(new AvatarEditorInternalEvent(AvatarEditorInternalEvent.SHOW_CREDITS_WINDOW));		}				protected function onShowPopup(event:AvatarEditorInternalEvent):void		{			popupWindow.showPopup(event.data as PopupVO);		}				protected function onButtonClick(event:MouseEvent):void		{			var btn:BasicButton= event.target as BasicButton;						if((btn == btnRandomLA) || (btn == btnRandomBR)){				dispatcher.dispatchEvent(new CAFEvent(CommandType.GET_RANDOM));			} else			if(btn == btnShare){							} else			if(btn == btnCancel){				model.dispatchExternalEvent(AvatarEditorEvent.CANCEL);			} else			if(btn == btnSave){				save();			} else			if(btn == btnUndo){				dispatcher.dispatchEvent(new CAFEvent(CommandType.UNDO_CHANGES));			}		}				protected function onUpdateToonix(event:Event):void		{			btnUndo.visible= (model.history.length > 1);						var hasFixedSkin:Boolean= model.hasFixedSkin(model.avatar.costume);			paletaDisabled.visible= hasFixedSkin;			paleta.visible= !hasFixedSkin;						if(model.avatar.costume > 0){				var costume:AvatarItemVO= model.getAccessoryById(model.avatar.costume);				if((costume.price > 0) && (!model.hasItemInPurchases(costume))){					costumePriceManager.setItem(costume);					costumePriceManager.setPrice(costume.price);					costumePriceManager.show();				} else {					costumePriceManager.hide();				}			} else {				costumePriceManager.hide();			}		}				protected function onSpecialAccessory(event:Event):void		{			toonix.setEmotion("emotion_checkout");		}				protected function onItemPurchased(event:AvatarEditorInternalEvent):void		{			var item:AvatarItemVO= event.data as AvatarItemVO;						if(model.avatar.costume > 0){				costumePriceManager.setItem(model.getAccessoryById(model.avatar.costume));			}						if(item.accessoryType == AccessoryType.COSTUME_ACCESSORY){				costumePriceManager.hide();			}		}				protected function onChangeActiveArea(event:Event):void		{			if(model.avatar.costume > 0){				var item:AvatarItemVO= model.getAccessoryById(model.avatar.costume);				if(item.price > 0 && !model.hasItemInPurchases(item)){					costumePriceManager.show();				}			}		}				private function showSaveAnimation():void		{			trace("Playing save animation");			toonix.addEventListener(AvatarDisplayEvent.EMOTION_COMPLETE, onSaveEmotionComplete);			toonix.setEmotion("emotion_new_jump");		}				private function onSaveEmotionComplete(e:AvatarDisplayEvent):void		{			trace("Dispatching save event");			toonix.removeEventListener(AvatarDisplayEvent.EMOTION_COMPLETE, onSaveEmotionComplete);						model.generateImage(toonix.getToonixImage());									model.dispatchExternalEvent(AvatarEditorEvent.SAVE);		}				private function hasLockedItems():Boolean		{			var costume:AvatarItemVO;			var head:AvatarItemVO;			var eyes:AvatarItemVO;			var mouth:AvatarItemVO;			var body:AvatarItemVO;			var ret:Boolean= false;						if(model.avatar.costume > 0){				costume= model.getAccessoryById(model.avatar.costume);			}			head= model.getAccessoryById(model.avatar.head);			eyes= model.getAccessoryById(model.avatar.eye);			mouth= model.getAccessoryById(model.avatar.mouth);			body= model.getAccessoryById(model.avatar.body);						if(costume)				ret||= !model.hasItemInPurchases(costume);			ret||= !model.hasItemInPurchases(head);			ret||= !model.hasItemInPurchases(eyes);			ret||= !model.hasItemInPurchases(mouth);			ret||= !model.hasItemInPurchases(body);						return ret;		}				public function destroy():void		{			if(credits.hasEventListener(AvatarEditorInternalEvent.SHOW_CREDITS_WINDOW)) credits.removeEventListener(AvatarEditorInternalEvent.SHOW_CREDITS_WINDOW, onShowCreditsWindow);						if(model.hasEventListener(AvatarEditorInternalEvent.CHANGE_ACTIVE_AREA)) model.removeEventListener(AvatarEditorInternalEvent.CHANGE_ACTIVE_AREA, onChangeActiveArea);			if(model.hasEventListener(AvatarEditorInternalEvent.UPDATE_TOONIX)) model.removeEventListener(AvatarEditorInternalEvent.UPDATE_TOONIX, onUpdateToonix);			if(model.hasEventListener(AvatarEditorInternalEvent.UPDATE_ACCESSORY)) model.removeEventListener(AvatarEditorInternalEvent.UPDATE_ACCESSORY, onUpdateToonix);			if(model.hasEventListener(AvatarEditorInternalEvent.CHANGE_COLOR)) model.removeEventListener(AvatarEditorInternalEvent.CHANGE_COLOR, onUpdateToonix);			if(model.hasEventListener(AvatarEditorInternalEvent.SHOW_POPUP)) model.removeEventListener(AvatarEditorInternalEvent.SHOW_POPUP, onShowPopup);			if(model.hasEventListener(AvatarEditorInternalEvent.ITEM_PURCHASED)) model.removeEventListener(AvatarEditorInternalEvent.ITEM_PURCHASED, onItemPurchased);						if(btnRandomLA.hasEventListener(MouseEvent.CLICK)) btnRandomLA.removeEventListener(MouseEvent.CLICK, onButtonClick);			if(btnRandomBR.hasEventListener(MouseEvent.CLICK)) btnRandomBR.removeEventListener(MouseEvent.CLICK, onButtonClick);			if(btnShare.hasEventListener(MouseEvent.CLICK)) btnShare.addEventListener(MouseEvent.CLICK, onButtonClick);			if(btnCancel.hasEventListener(MouseEvent.CLICK)) btnCancel.addEventListener(MouseEvent.CLICK, onButtonClick);			if(btnSave.hasEventListener(MouseEvent.CLICK)) btnSave.addEventListener(MouseEvent.CLICK, onButtonClick);			if(btnUndo.hasEventListener(MouseEvent.CLICK)) btnUndo.addEventListener(MouseEvent.CLICK, onButtonClick);						if(toonix.hasEventListener(AvatarDisplayEvent.LOAD_COMPLETE)) toonix.removeEventListener(AvatarDisplayEvent.LOAD_COMPLETE, onToonixComplete);						credits.destroy();			toonix.destroy();			popupWindow.destroy();			costumePriceManager.destroy();			costumeManager.destroy();			featureManager.destroy();			paleta.destroy();			dictionary.destroy();						txtToonixName.text= "";		}	}}