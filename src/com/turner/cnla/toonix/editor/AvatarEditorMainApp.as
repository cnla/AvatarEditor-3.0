package com.turner.cnla.toonix.editor{	import com.adobe.serialization.json.JSON;	import com.adobe.serialization.json.JSONDecoder;	import com.turner.caf.control.CAFEvent;	import com.turner.cnla.library.AvatarItemVO;	import com.turner.cnla.library.AvatarVO;	import com.turner.cnla.library.CNLALibraryInvoker;	import com.turner.cnla.toonix.editor.commands.CommandType;	import com.turner.cnla.toonix.editor.controller.Controller;	import com.turner.cnla.toonix.editor.events.AvatarEditorEvent;	import com.turner.cnla.toonix.editor.events.AvatarEditorInternalEvent;	import com.turner.cnla.toonix.editor.events.Dispatcher;	import com.turner.cnla.toonix.editor.model.Model;	import com.turner.cnla.toonix.editor.model.Params;	import com.turner.cnla.toonix.editor.types.AccessoryType;	import com.turner.cnla.toonix.editor.view.AvatarEditorView;	import com.turner.cnla.toonix.editor.view.BackgroundWrapper;	import com.turner.cnla.toonix.editor.view.Preloader;		import flash.display.MovieClip;	import flash.events.Event;	import flash.external.ExternalInterface;	import flash.geom.Point;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.Security;	import flash.utils.DebugUtils;		/**	 * Javascript communication	 * 	 * From AvatarEditor:	 * onAppReady() when the app is ready to receive initialization data.	 * onBuyAccessory(accessoryId) when the user has bought an accessory. Param "accessoryId" is the id of the accessory purchased.	 * onShowCredits() when the user pressed the button to show the credits window.	 * onCancel() when the user pressed the Cancel button.	 * onSave(avatar) when the user pressed the Save button. Param "avatar" is a JSON string with the generated avatar info.	 * 	 * To AvatarEditor:	 * init(data) initializes the app. Param "data" is a JSON string with the following attributes:	 *  - country	 *  - language	 *  - userId	 *  - userName	 *  - credits	 *  - avatar	 *  - cdnPath	 *  - configPath	 * setCredits(credits) when the user has charged credits outside the context of the AvatarEditor	 * saveAvatar() triggers a click on the button "save" inside the avatar editor.	 * destroy() when the app needs to be unloaded	 */	public class AvatarEditorMainApp extends MovieClip	{		private var dispatcher:Dispatcher;		private var controller:Controller;		private var model:Model;				public var avatarEditorView:AvatarEditorView;		public var preloader:Preloader;		public var background:BackgroundWrapper;				public function AvatarEditorMainApp()		{			super();						trace("## Toonix Editor - v2.0 - pgrabarnik - Ready for CN 3.0 - \"So now you know you could be dead before they let you...\"");						Security.allowDomain("*");						dispatcher= Dispatcher.getInstance();			controller= new Controller(dispatcher);			model= Model.getInstance();						preloader.visible= false;						Params.ENVIRONMENT= (ExternalInterface.available) ? (ExternalInterface.call("function(){ return (window.location.href.indexOf('cartoonnetwork') != -1) ? 'PROD' : 'CONTRIB'; }") || "CONTRIB") : "CONTRIB";			Params.ENVIRONMENT= loaderInfo.parameters["env"] || Params.ENVIRONMENT;			if(ExternalInterface.available){				ExternalInterface.addCallback("init", init);				ExternalInterface.addCallback("setCredits", setCredits);				ExternalInterface.addCallback("saveAvatar", saveAvatar);				ExternalInterface.addCallback("destroy", destroy);			}						CNLALibraryInvoker.divId= loaderInfo.parameters["divId"] || null;			CNLALibraryInvoker.swfPath = loaderInfo.loaderURL.substr(loaderInfo.loaderURL.lastIndexOf("/")+1);						// Modo debug			if(!loaderInfo.parameters["country"]){				trace("Modo debug");				var testingCountry:String= "ar";				var initData:Object= new Object();				initData.user= 			getTestUser(true);				initData.configPath= 	"xml/avatarEditorConfig.xml";				initData.cdnPath= 		"";				initData.avatar= 		getTestAvatar(true);				init(initData, testingCountry);			}						model.callJS("onAppReady");		}				public function init(init:Object, testingCountry:String = null):void		{			background= new BackgroundWrapper();			addChildAt(background, 1);						model.addEventListener(AvatarEditorInternalEvent.APP_INITIALIZED, onAppInitialized);			model.addEventListener(AvatarEditorInternalEvent.LOAD_COMPLETE, onResourceLoadComplete);			model.addEventListener(AvatarEditorInternalEvent.LOAD_PROGRESS, onResourceLoadProgress);			model.addEventListener(AvatarEditorInternalEvent.DISPATCH_EXTERNAL_EVENT, onDispatchExternalEvent);						init.country= loaderInfo.parameters["country"] || ((testingCountry) ? testingCountry : "ar");			init.language= (init.country == "br") ? "pt" : ( (init.country == "laen") ? "en" : "es" );						dispatcher.dispatchEvent(new CAFEvent(CommandType.INIT_APP, init));		}				protected function onDispatchExternalEvent(event:AvatarEditorInternalEvent):void		{			var eventData:Object= event.data;						switch(eventData.type){				case AvatarEditorEvent.BUY_ACCESSORY:					model.callJS("onBuyAccessory", eventData.data.id); 				break;				case AvatarEditorEvent.CANCEL:					model.callJS("onCancel"); 				break;				case AvatarEditorEvent.SAVE:					var jsonData:String= AvatarVO.toJSON(model.avatar);					var objData:Object= JSON.decode(jsonData);					objData.imageData = model.imageData;					trace("---------------");					trace(objData.imageData);					trace("---------------");					jsonData= JSON.encode(objData);					model.callJS("onSave", jsonData); 				break;				case AvatarEditorEvent.SHOW_CREDITS_WINDOW:					model.callJS("onShowCredits"); 				break;			}		}				public function getAvatar():AvatarVO		{			return model.avatar;		}				public function setCredits(newCredits:int):void		{			avatarEditorView.updateCredits(newCredits);		}				public function getCredits():int		{			return avatarEditorView.getCredits();		}				public function getPurchases():Vector.<AvatarItemVO>		{			return model.itemsBought;		}				public function saveAvatar():void		{			avatarEditorView.save();		}				protected function onAppInitialized(event:AvatarEditorInternalEvent):void		{			onResourceLoadComplete(null);			trace("App ready");		}				protected function onResourceLoadProgress(event:AvatarEditorInternalEvent):void		{			var progress:Point= event.data as Point;						preloader.showProgress(progress.x);		}				protected function onResourceLoadComplete(event:AvatarEditorInternalEvent):void		{			preloader.visible= false;						background.init();						avatarEditorView.addEventListener(AvatarEditorInternalEvent.LOAD_COMPLETE, onAvatarEditorViewComplete);			avatarEditorView.init();		}				protected function onAvatarEditorViewComplete(event:Event):void
		{			model.callJS("onLoaded");
		}				public function destroy():void		{			trace("## ToonixEditor - destroy() - initializing destroy method");			if(model.hasEventListener(AvatarEditorInternalEvent.APP_INITIALIZED)) model.removeEventListener(AvatarEditorInternalEvent.APP_INITIALIZED, onAppInitialized);			if(model.hasEventListener(AvatarEditorInternalEvent.LOAD_COMPLETE)) model.removeEventListener(AvatarEditorInternalEvent.LOAD_COMPLETE, onResourceLoadComplete);			if(model.hasEventListener(AvatarEditorInternalEvent.LOAD_PROGRESS)) model.removeEventListener(AvatarEditorInternalEvent.LOAD_PROGRESS, onResourceLoadProgress);			if(model.hasEventListener(AvatarEditorInternalEvent.DISPATCH_EXTERNAL_EVENT)) model.removeEventListener(AvatarEditorInternalEvent.DISPATCH_EXTERNAL_EVENT, onDispatchExternalEvent);						background.destroy();			avatarEditorView.destroy();			dispatcher.destroy();			controller= null;			model.destroy();			trace("## ToonixEditor - destroy() - destroy finished");		}		private function getTestUser(forceRealData:Boolean=false):Object		{			var useRealUser:Boolean= forceRealData || (Math.random() > 0.5);			var user:Object= new Object();			user.id = useRealUser ? 35244229 : 0;			user.name = useRealUser ? "SubtePass" : null;			user.credits = useRealUser ? 10702 : 0;						return user;		}				private function getTestAvatar(forceRealData:Boolean=false):Object		{			var useRealAvatar:Boolean = forceRealData || (Math.random() > 0.5);			var avatar:Object= null;						if(useRealAvatar){				avatar= new Object();				avatar.body= 77327641;				avatar.bodyColor= 13162796;				avatar.costume= 0;				avatar.eye= 77327698;				avatar.head= 77327762;				avatar.headColor= 8545194;				avatar.imagePath= "";				avatar.mouth= 77327810;				avatar.skinColor= 15344167;			}						return avatar;		}				private function convertDataToJSON():void		{			var urlLdr:URLLoader= new URLLoader();			urlLdr.addEventListener(Event.COMPLETE, onAvatarDataComplete);			urlLdr.load(new URLRequest("http://ardmtcont1.turner.com:8515/staticContent/avatar?slot=SLOT_1"));		}				protected function onAvatarDataComplete(event:Event):void		{			var xml:XML= new XML(event.target.data);						var headList:Array= parseAccessory(xml.heads.head, AccessoryType.HEAD_ACCESSORY);			var eyeList:Array= parseAccessory(xml.eyes.eye, AccessoryType.EYES_ACCESSORY);			var mouthList:Array= parseAccessory(xml.mouths.mouth, AccessoryType.MOUTH_ACCESSORY);			var bodyList:Array= parseAccessory(xml.bodys.body, AccessoryType.BODY_ACCESSORY);			var costumeList:Array= parseAccessory(xml.costumes.costume, AccessoryType.COSTUME_ACCESSORY);						var accessoryList:Array= headList.concat(eyeList, mouthList, bodyList, costumeList);						trace(JSON.encode(accessoryList));		}				private function parseAccessory(list:XMLList, accessoryType:String):Array		{			var ret:Array= new Array();			for each(var item:XML in list){				if(item.swf.name.toString().substr(0, 4).toLowerCase() == "new."){					var obj:Object= new Object();					obj.accessoryType= accessoryType.replace("sAccessory", "").replace("Accessory", "").toUpperCase();					obj.id= parseInt(item.id.toString());					obj.price= parseInt(item.cost.toString());					obj.title= item.name.toString();					obj.isSponsored= (item.sponsored.toString().toLowerCase() == "true");					obj.category= item.version.toString().length ? item.version.toString() : null;										if(accessoryType == AccessoryType.COSTUME_ACCESSORY){						obj.headPath= "http://ardmtdata1.turner.com/toonla-released/images" + item.headSWF.path.toString();						obj.bodyPath= "http://ardmtdata1.turner.com/toonla-released/images" + item.swf.path.toString();					} else {						obj.path= "http://ardmtdata1.turner.com/toonla-released/images" + item.swf.path.toString();					}										ret.push(obj);				}			}						return ret;		}	}}